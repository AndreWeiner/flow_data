/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         10;        // = 3900 t U/d, 0.3s ~= 117.2 CTU ~= 25 vortex shedding cycles cl, 1 CTU = d/U = 0.00256

deltaT          1.0e-5;

writeControl    runTime;

writeInterval   2.5e-4;

purgeWrite      0;

writeFormat     binary;

writePrecision  8;

timeFormat      general;

timePrecision   8;

runTimeModifiable false;

functions
{
    forces
    {
        type             forceCoeffs;
        libs             (forces);
        executeControl   timeStep;
        executeInterval  1;
        writeControl     timeStep;
        writeInterval    1;
        log              false; 
        timeStart        0;
        patches
        (
            cylinder
        );
        rhoInf      1;
        rho         rhoInf;
        CofR        (0.2 0.2 0.005);
        liftDir     (0 1 0);
        dragDir     (1 0 0);
        pitchAxis   (0 0 1);
        magUInf     39.0;
        lRef        0.1;
        Aref        0.0314159265359;
    }

    gradU
    {
        type             grad;
        libs             (fieldFunctionObjects);
        field            U;
        result           gradU;
        log              true;
        executeControl   timeStep;
        executeInterval  1;
        writeControl     timeStep;
        writeInterval    25;
        timeStart        0.19225;   // U = 39m/s, D = 0.1m -> start at 75 tU/D -> t_tilde_end = 75
    }

    sample_planes
    {
        type             surfaces;
        libs             (sampling);
        log              true;
        executeControl   timeStep;
        executeInterval  1;
        writeControl     timeStep;
        writeInterval    25;
        surfaceFormat    raw;
        timeStart        0.19225;
        formatOptions
        {
            raw 
            {
                normal true;
            }
        }
        fields          (gradU p U);
        surfaces
        {
            cylinder
            {
                type patch;
                patches (cylinder);
                interpolate false;
                invariant true;
            }
            plane_xz
            {
                type    plane;
                source  cells;
                point   (0 1 0);
                normal  (0 1 0);
            }
            plane_xy
            {
                type    plane;
                source  cells;
                point   (0 0 0.157079633);
                normal  (0 0 1);
            }
        }
    }

    sample_lines
    {
        type             sets;
        libs             (sampling);
        log              true;
        executeControl   timeStep;
        executeInterval  1;
        writeControl     timeStep;
        writeInterval    25;
        timeStart        0.19225;
        setFormat        csv;
        fields          (p U UMean pMean UPrime2Mean pPrime2Mean);
        sets
        {
            // line samples @ x/D = 1.06, 1.54, 2.02 (Fig 10) & 5, 7, 10 (Fig 9)), z = pi D/2
            xD_106
            {
                type face;
                axis y;
                start (1.106 0 0.157079633);
                end (1.106 2 0.157079633);
            }
            xD_154
            {
                type face;
                axis y;
                start (1.154 0 0.157079633);
                end (1.154 2 0.157079633);
            }
            xD_202
            {
                type face;
                axis y;
                start (1.202 0 0.157079633);
                end (1.202 2 0.157079633);
            }
            xD_5
            {
                type face;
                axis y;
                start (1.5 0 0.157079633);
                end (1.5 2 0.157079633);
            }
            xD_7
            {
                type face;
                axis y;
                start (1.7 0 0.157079633);
                end (1.7 2 0.157079633);
            }
            xD_10
            {
                type face;
                axis y;
                start (2.0 0 0.157079633);
                end (2.0 2 0.157079633);
            }
            // wake centerline in streamwise direction
            yD_1
            {
                type face;
                axis x;
                start (0.85 1 0.157079633);
                end (2.4 1 0.157079633);
            }
        }

    }

    // z-coord = pi*D / 2 for all probes
    probes
    {
        type                probes;
        libs                (sampling);
        name                probes;
        executeControl      timeStep;
        executeInterval     1;
        writeControl        timeStep;
        writeInterval       1;
        timeStart           0;
        fields              (U p);
        fixedLocations      true;
        interpolationScheme cell;

        probeLocations
        (
            (0.871 1.066 0.157079633)
            (0.93 1.069 0.157079633)
            (1.0 1.0 0.157079633)
            (1.1 1.0 0.157079633)
            (1.0 1.059 0.157079633)
            (0.85 1.0 0.157079633)
            (0.78271 1.046923 0.157079633) // not exactly as in the paper to avoid probe being within the cylinder

        );
        includeOutOfBounds  false;
    }

    fieldAverage
    {
        type             fieldAverage;
        libs             (fieldFunctionObjects);
        executeControl   timeStep;
        executeInterval  1;
        writeControl     writeTime;
        writeInterval    100;
        timeStart        0.19225;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
        );
    }

    residuals
    {
            type             solverInfo;
            libs             ("libutilityFunctionObjects.so");
            fields           (U p);
            executeControl   timeStep;
            executeInterval  1;
            writeControl     timeStep;
            writeInterval    1;
            timeStart        0;
    }
}

// ************************************************************************* //
